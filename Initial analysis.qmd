---
title: "Pig handling"
format: pdf
editor: source
editor_options: 
  chunk_output_type: console
---

```{r, echo=F}
knitr::opts_chunk$set(echo = F, warning = F, message = F)
```

```{r}
library(tidyverse)
library(survival)
library(survminer)
library(lubridate)
library(rjags)
library(runjags)
library(ggmcmc)
library(ggpubr)
source("scripts/Functions.R")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```


## For discussion: potential outline of non-spatial analyses

Main things to compare among treatments, excluding spatial behaviour after release:

• Times to events (handling, recovery, total time, etc)

• Adverse outcomes -- injuries, death within 30 days

• Body temperature and hyperthermia

• ...


```{r load and tidy data}
x <- read.csv("input/working_pig_data_2025-05-30.csv", header = T) %>%
  janitor::clean_names() %>%
  mutate(time = as.POSIXct(date, format="%d/%m/%Y %H:%M", tz="Australia/Brisbane"),
         date = as.Date(date, format="%d/%m/%Y", tz="Australia/Brisbane"),
         time_of_restraint = as.POSIXct(time_of_restraint, format="%d/%m/%Y %H:%M"),
         time_of_restraint = ymd_hms(time_of_restraint, tz="Australia/Brisbane"),
         time_of_release = as.POSIXct(time_of_release, format="%d/%m/%Y %H:%M"),
         time_of_release = ymd_hms(time_of_release, tz="Australia/Brisbane"),
         time_standing = as.POSIXct(time_standing, format="%d/%m/%Y %H:%M"),
         time_standing = ymd_hms(time_standing, tz="Australia/Brisbane"),
         reversal_time_min = as.numeric(reversal_time_min),
         dose_yohimbine_mg = as.numeric(dose_yohimbine_mg),
         handling_duration_min = as.numeric(handling_duration_min),
         dose_atipamezole_mg = as.numeric(dose_atipamezole_mg),
         handling_sec = time_of_release - time_of_restraint, # For Pole and Manual only
         recovery_sec = time_standing - time_of_release, # For Pole only
         induction_sec = as.numeric(induction_min) * 60,
         total_sec = NA,
         latent_sec = NA,
         ambient_temp = as.numeric(ambient_temp),
         temp_body = as.numeric(temp_body),
         hyperthermic = 0,
         mortality = as.Date(mortality, format = "%d/%m/%Y %H:%M"), 
         death = as.Date(death_date, format = "%d/%m/%Y")) 

# Pigs with body temp >= 40 are classed as hyperthermic
x$hyperthermic[which(x$temp_body >=40)] <- 1

# Adjust a misreported date time
x$time[which(x$time == "2023-09-21 00:00:00 AEST")] <- "2023-09-21 06:10:00 AEST"

x$capture_method <- factor(x$capture_method, levels = c("Manual", "Pole syringe", "Darting"))

n_manual <- length(which(x$capture_method == "Manual"))
n_drug <- nrow(x) - n_manual

```

Fuck around with inconsistent time recording. The times and durations recorded for each set of studies are a bit of a shitfight, but they boil down to this:

![Flow chart showing timed components for each method](background/capture_process.png)  

I need to convert all the times and durations to the common language above.  

For manual pigs -  
total duration = latent period [time of restraint - time of arrival at trap] +
                 handling duration [time of release - time of restraint]

```{r manual pig durations}
x$latent_sec[which(x$capture_method == "Manual")] <- 
  (x$time_of_restraint[which(x$capture_method == "Manual")] - 
  x$time[which(x$capture_method == "Manual")])

x$total_sec[which(x$capture_method == "Manual")] <- 
  x$latent_sec[which(x$capture_method == "Manual")] +
  x$handling_sec[which(x$capture_method == "Manual")]
```

For pole jabbed pigs -

Total time = latent period [time of restraint - time of arrival at trap] + induction duration + handling duration + recovery duration, OR  

Total time = time standing - time of arrival at trap (use this more direct accounting)

```{r pole pig durations}
# Some pole pigs have -ve recovery time because time_standing has no seconds
# here, time_standing = time_release, so recovery = 0
x$recovery_sec[which(x$recovery_sec < 0)] <- 0

# Pig DM22 has incorrect hours and minutes for time of arrival. Change it to time of restraint
x$time[which(x$time_standing < x$time)] <- x$time_of_restraint[which(x$time_standing < x$time)]

# Same for DM105
x$time[which(x$time == as.POSIXct("2020-11-24 10:57:00", tz="Australia/Brisbane"))] <-
  x$time_of_restraint[which(x$time == as.POSIXct("2020-11-24 10:57:00", tz="Australia/Brisbane"))]

# Total time for pole pigs = induction_sec + handling_sec + recovery_sec
x$total_sec[which(x$capture_method == "Pole syringe")] <- 
  60 * (x$time_standing[which(x$capture_method == "Pole syringe")] -
  x$time[which(x$capture_method == "Pole syringe")])

# Recovery time for pole pigs = reversal duration
x$recovery_sec[which(x$capture_method == "Pole syringe")] <- 
  x$time_standing[which(x$capture_method == "Pole syringe")] - 
  x$time_of_release[which(x$capture_method == "Pole syringe")]
```


For darted pigs - 

Arrival time wasn't recorded, but total time was, so work backwards from that.  

Total time = total time.

```{r darted pig durations}
# Handling time for darted pigs = handling_duration_min * 60 seconds
x$handling_sec[which(x$capture_method == "Darting")] <- 
  x$handling_duration_min[which(x$capture_method == "Darting")] * 60 

# Recovery time for darted pigs = reversal duration
# (Pole pigs were calculated above as time standing - time release)
x$recovery_sec[which(x$capture_method == "Darting")] <- 
  x$reversal_time_min[which(x$capture_method == "Darting")] * 60 # use minutes() instead?

# Total time for darted pigs = total_duration_min * 60 seconds
x$total_sec[which(x$capture_method == "Darting")] <- 
  x$total_duration_min[which(x$capture_method == "Darting")] * 60 
```

```{r tidy up}
x <- x %>%
  mutate(start = 0,
         handling_min = round(as.numeric(handling_sec / 60), 2),
         recovery_min = round(as.numeric(recovery_sec / 60), 2),
         total_min = round(as.numeric(total_sec / 60), 2)) %>%
  dplyr::select(date, id, capture_method, sex, ambient_temp, temp_body, hyperthermic, 
                start, induction_min, handling_min, recovery_min, total_min,
                drug_s, dose_yohimbine_mg, dose_atipamezole_mg, total_duration_min,
                mortality, death, capture_death_duration, fate) 

# Take a different total min (as recorded in the spreadsheet provided) for those pigs with incomplete data
x$total_min[which(is.na(x$total_min))] <- x$total_duration_min[which(is.na(x$total_min))]

x <- select(x, -total_duration_min)
```


The range of questions we can answer is limited by the lack of standardised measurements, e.g. no mass for manually restrained pigs. 

Also, capture method and drugs are confounded

-   91 manual captures with no drugs

-   155 pole syringe captures with zoletil

-   119 dart captures with zoletil and xylazine (59 atipamezole, 31 yohimbine, 29 without reversal?)

And lots of data are missing, e.g. handling times for most pigs given zoletil and xylazine without reversal.  

{{< pagebreak >}}



**Q1 Do time to event profiles (survival curves) differ among treatments?**

*Expectation 1.1: Pigs subjected to manual restraint had shorter handling and total time than pigs immobilised with pole syringe or dart.*

Handling time \~ capture method (manual, pole, dart)


```{r handling time by capture method, include = F}
# survival formula
surv.ht <- Surv(time = x$handling_min, event = rep(1, nrow(x)))

# KM survival model
ht1 <- survfit(surv.ht ~ capture_method, data=x)
ht1

surv_median(ht1)

```

Handling time was clearly shorter for pigs subjected to manual handling (median handling time = `r surv_median(ht1)[1,2]` mins, n = `r ht1$n[1]`) than for pigs subjected to immobilisation via pole syringe (median handling time = `r surv_median(ht1)[2,2]`  mins, n = `r ht1$n[2]`), which was clearly shorter than pigs immobilised by darting (median handling time = `r surv_median(ht1)[3,2]` mins, n = `r ht1$n[3]`).    


```{r plot handling time by capture method}
ggsurvplot(ht1, data=x, conf.int = T, 
           palette = "jama",
           legend = "bottom", legend.title = "Capture method",
           legend.labs = c("Manual", "Pole syringe", "Dart"),
           ggtheme = theme_survminer(font.caption = c(10, "plain", "black")))  +
  xlab("Handling time (mins)") +
  ylab("Proportion of pigs") +
  labs(caption = "KM curves: handling time for pigs subjected to different capture methods") 

ht1.median <- as.data.frame(surv_median(ht1)) %>%
  mutate(strata = factor(gsub("capture_method=", "", strata), 
                         levels = c("Manual", "Pole syringe", "Darting")))

ggplot(ht1.median) +
  geom_point(aes(x=strata, y = median)) +
  geom_linerange(aes(x=strata, ymin = lower, ymax = upper)) +
  labs(y = "Median handling time (mins)", x = "Treatment",
       caption = "Median handling time for pigs subjected to different capture methods") +
  theme_classic()

```

Total time \~ capture method  

    

```{r total time, include = F}
# survival formula
surv.tt <- Surv(time = x$total_min, event = rep(1, nrow(x)))

# KM survival model
tt1 <- survfit(surv.tt ~ capture_method, data=x)
tt1

surv_median(tt1)

# Greatest total time
max.recovery <- as.numeric(x$recovery_min[which(x$total_min == max(x$total_min, na.rm = T))])
```

Total time was also shorter for pigs subjected to manual handling (median total time = `r surv_median(tt1)[1,2]` mins, n = `r tt1$n[1]`) than for pigs subjected to pole syringe (median total time = `r surv_median(tt1)[2,2]` mins, n = `r tt1$n[2]`), which was similar to pigs subjected to darting (median total time = `r surv_median(tt1)[3,2]` mins, n = `r tt1$n[3]`). 

There's a big statistical outlier in the darted pigs due to one pig with a recovery duration of `r max.recovery` minutes, but this doesn't really impact the median.  

```{r plot capture method TT}
ggsurvplot(tt1, data=x, conf.int = T, 
           palette = "jama",
           legend = "bottom", legend.title = "Capture method",
           legend.labs = c("Manual", "Pole syringe", "Dart"),
           ggtheme = theme_survminer(font.caption = c(10, "plain", "black")))  +
  xlab("Total time (mins)") +
  ylab("Proportion of pigs") +
  labs(caption = "KM curves: total time for pigs subjected to different capture methods")

tt1.median <- as.data.frame(surv_median(tt1)) %>%
  mutate(strata = factor(gsub("capture_method=", "", strata), 
                         levels = c("Manual", "Pole syringe", "Darting")))

ggplot(tt1.median) +
  geom_point(aes(x=strata, y = median)) +
  geom_linerange(aes(x=strata, ymin = lower, ymax = upper)) +
  labs(y = "Median total time (mins)", x = "Treatment",
       caption = "Median total time for pigs subjected to different capture methods") +
  theme_classic()
```


*Expectation 1.2: Pigs subjected to different chemical treatments had different handling and total time.*

Again, there's some confounding here that will have to be woven into the discussion.

Maybe:

Recovery time \~ drug combination (zol, zol xyl, zol xyl + yohimbine, zol xyl + atipamezole?)  

Anyway, looking at total time for now...

Total time \~ drug combination (zol, zol xyl, zol xyl + yohimbine, zol xyl + atipamezole?)  


```{r model drug combo tt, include = F}
xd <- x %>% 
  filter(capture_method != "Manual") %>%
  mutate(capture_method = factor(capture_method, levels = c("Pole syringe", "Darting")))

# create categorical variable for drug combination
xd$combo <- NA
xd$combo[which(xd$drug_s == "Zoletil")] <- "Z"
xd$combo[which(xd$drug_s == "Zoletil/Xylazine")] <- "ZX"
xd$combo[which(xd$dose_yohimbine_mg != "")] <- paste0(xd$combo[which(xd$dose_yohimbine_mg != "")], "+Y")
xd$combo[which(xd$dose_atipamezole_mg != "")] <- paste0(xd$combo[which(xd$dose_atipamezole_mg != "")], "+A")
table(xd$combo)

#xd <- xd %>%
#  filter(xd$combo != "ZX")

xd %>%
  filter(combo == "ZX")

# survival formula
surv.tt.drug <- Surv(time = xd$total_min, event = rep(1, nrow(xd)))

# KM survival model
tt.drug1 <- survfit(surv.tt.drug ~ combo, data=xd)
tt.drug1
``` 

Pigs that were administered zoletil and xylazine but not a reversal agent had a much shorter total time than pigs given any other combination of drugs (median total time ZX = `r surv_median(tt.drug1)[2,2]` mins, n = `r tt.drug1$n[2]`). I suppose this is because the reason that they weren't given any reversal is because they declined to hang around and wait for it, so it's not a valid comparison of the effects of different drug combinations. 

I'm not sure if this is a valid or useful comparison (Jordan?), but pigs given only zoletil had only slightly longer total times (median total time = `r surv_median(tt.drug1)[1,2]` mins, n = `r tt.drug1$n[1]`) than pigs given zoletil and xylazine with reversal. There was no clear difference among the latter group  (median total time ZX+A = `r surv_median(tt.drug1)[3,2]` mins, n = `r tt.drug1$n[3]`; median total time ZX+Y = `r surv_median(tt.drug1)[4,2]` mins, n = `r tt.drug1$n[4]`). 

```{r plot drug combo tt}
ggsurvplot(tt.drug1, data=xd, conf.int = T, 
           palette = "jama",
           legend = "bottom", legend.title = "Drug regime",
           legend.labs = c("Z", "ZX", "ZX+A", "ZX+Y"),
           ggtheme = theme_survminer(font.caption = c(10, "plain", "black")))  +
  xlab("Time (mins)") +
  ylab("Proportion of pigs") +
  labs(caption = "KM curves: total time for pigs subjected to different chem immob regimes")
  
tt.drug1.median <- as.data.frame(surv_median(tt.drug1)) %>%
  mutate(strata = gsub("combo=", "", strata))

ggplot(tt.drug1.median) +
  geom_point(aes(x=strata, y = median)) +
  geom_linerange(aes(x=strata, ymin = lower, ymax = upper)) +
  labs(y = "Median total time (mins)", x = "Treatment",
       caption = "Median total time for pigs subjected to different chem immob regimes") +
  theme_classic() 

```

Again, the zoletil only treatment is perfectly confounded with pole syringe administration: all darted pigs received xylazine.  

```{r drug confounding}
xd %>% group_by(combo, capture_method) %>%
  summarise(n = n()) %>%
  knitr::kable()
```


**Q2 Did the probability of adverse events differ among capture methods?**

We don't seem to have consistent data for scoring or describing injuries, but we could look at differences in probability of death (from causes other than misadventure) within 30 days.

• Pr(death \<31 days after capture) \~ treatment (± body temp or hyperthermia, total time, recovery duration for immobilised pigs)


```{r explore untimely deaths}

x$lifespan <- x$death - x$date
# How many dead within 40 days of capture
cat(paste("N dead < 41 days after capture =", length(which(x$lifespan < 41))))

# How many dead within 30 days of capture
cat(paste("N dead < 31 days after capture =", length(which(x$lifespan < 31))))

# Which pigs died < 15 days after capture?
x[which(x$lifespan < 15),]

fate_tab <- x %>%
  filter(lifespan < 15) %>%
  select(id, capture_method, temp_body, lifespan, fate) %>%
  arrange(capture_method)
fate_tab

# list those pigs that died from causes other than misadventure < 31 days post capture
untimely_pigs <- x$id[which(x$fate %in% c("dead_unknown", "dead_euthanased") & x$lifespan < 15)]
x$untimely <- 0
x$untimely[which(x$id %in% untimely_pigs)] <- 1

fate_tab %>% 
  filter(id %in% untimely_pigs)

n_not_untimely <- nrow(fate_tab) - length(untimely_pigs)

# Save x
write.csv(x, "input/refined handling data.csv", row.names = F)
```


```{r pr untimely death binomial}
ni <- 15000
nc <- 4
nadapt <- 1000
nb <- 1000
set.seed(1080)

x_binom <- x %>%
  group_by(capture_method) %>%
  summarise(n = n(),
            ud = sum(untimely)) %>%
  mutate(pr_ud = ud/n)

ud_dat <- list(C = x_binom$ud,
               N = x_binom$n,
               ngroup = 3)

ud_pars <- c("alpha", "bt_alpha")

cat("model {
  ## Priors
  for (b in 1:ngroup) {
    alpha[b] ~ dnorm(0, 0.001)  
    logit(p[b]) <- alpha[b]
  }

  ## Likelihood
  for (b in 1:ngroup) {
    C[b] ~ dbin(p[b], N[b])
  }

  ## Derived quantities
  for (b in 1:ngroup) {
    bt_alpha[b] <- exp(alpha[b]) / (1 + exp(alpha[b]))
  }

  # Pairwise differences
  diff_12 <- bt_alpha[1] - bt_alpha[2]
  diff_13 <- bt_alpha[1] - bt_alpha[3]
  diff_23 <- bt_alpha[2] - bt_alpha[3]
}
" , fill=TRUE, file="Scripts/pr_untimely_death.txt")

pr_untimely <- run.jags(method = "parallel",
                       model = "Scripts/pr_untimely_death.txt",
                       monitor = ud_pars,
                       data = ud_dat,
                       sample = ni,
                       n.chains = nc,
                       adapt = nadapt,
                       burnin = nb,
                       summarise = F,
                       plots = F,
                       silent.jags = F)

pr_untimely_list <- as.mcmc.list(pr_untimely)
#saveRDS(pr_untimely_list, "Output/pr_untimely_list.RDS")

ud_sum <- mod_results_95(pr_untimely_list)
ud_modmat <- ud_sum$modMat  
ud_S <- ud_sum$S

plot_trace <- F
if(plot_trace == T){
  ta <- ggs_traceplot(ud_S, family = "alpha")
  da <- ggs_density(ud_S, family = "bt_alpha") +
    xlim(c(0, 1))
}

head(ud_sum$sumTab)

pr_ud_manual <- ud_sum$sumTab$Mean[ud_sum$sumTab$Par == "bt_alpha[1]"] %>% round(2)
pr_ud_pole <- ud_sum$sumTab$Mean[ud_sum$sumTab$Par == "bt_alpha[2]"] %>% round(2)
pr_ud_dart <- ud_sum$sumTab$Mean[ud_sum$sumTab$Par == "bt_alpha[3]"] %>% round(2)

hpdi_ud_manual <- c(ud_sum$sumTab$HPDIlower[ud_sum$sumTab$Par == "bt_alpha[1]"], ud_sum$sumTab$HPDIupper[ud_sum$sumTab$Par == "bt_alpha[1]"]) %>%
  round(2)
hpdi_ud_pole <- c(ud_sum$sumTab$HPDIlower[ud_sum$sumTab$Par == "bt_alpha[2]"], ud_sum$sumTab$HPDIupper[ud_sum$sumTab$Par == "bt_alpha[2]"]) %>%
  round(2)
hpdi_ud_dart <- c(ud_sum$sumTab$HPDIlower[ud_sum$sumTab$Par == "bt_alpha[3]"], ud_sum$sumTab$HPDIupper[ud_sum$sumTab$Par == "bt_alpha[3]"]) %>%
  round(2)

pr_ud_df<- ud_sum$sumTab[c(4:6),]  %>%
  select(Par, Mean, HPDIlower, HPDIupper) %>%
  mutate(Par = c("Manual", "Pole syringe", "Dart"))

ggplot(pr_ud_df) +
  geom_point(aes(x=Par, y=Mean)) +
  geom_linerange(aes(x=Par, ymin=HPDIlower, ymax= HPDIupper))

ud_post <- as.data.frame(ud_modmat[, c(5:7)])
ud_post_long <- ud_post %>%
  pivot_longer(cols = everything(), names_to = "parameter", values_to = "value") %>%
  mutate(parameter = factor(parameter, labels = c("Manual restraint", "Pole syringe", "Darting")))

ggplot(ud_post_long) +
  geom_density(aes(x=value, fill=parameter, colour=parameter), alpha=0.3) +  theme_pubr(base_size = 8) +
  ylab("Density") +
  xlab("Value") +
  scale_y_continuous(expand=c(0,0), limits = c(0,75)) +
  scale_x_continuous(expand=c(0,0)) +
  theme(legend.position = "bottom",
        legend.text = element_text(size=8),
        legend.title = element_blank(),
        axis.text = element_text(colour=1),
        strip.background = element_blank(),
        strip.text.x = element_blank(),
        axis.line=element_line(),
        legend.key.size = unit(0.3, "cm")) 

```
    
Excluding `r n_not_untimely` pigs that were died from vehicle collisions or being shot during pig control operations, there were no clear differences among groups in the probability of a pig dying within 14 days of capture (manual restraint = `r pr_ud_manual`, 95% HPDI = `r hpdi_ud_manual[1]`, `r hpdi_ud_manual[2]`; pole syringe = `r pr_ud_pole`, 95% HPDI = `r hpdi_ud_pole[1]`, `r hpdi_ud_pole[2]`; darting = `r pr_ud_dart`, 95% HPDI = `r hpdi_ud_dart[1]`, `r hpdi_ud_dart[2]`).  

```{r pr dead on capture binomial}
x$dead_on_capture <- 0
x$dead_on_capture[which(x$lifespan < 1)] <- 1

x_binom_doc <- x %>%
  group_by(capture_method) %>%
  summarise(n = n(),
            doc = sum(dead_on_capture)) %>%
  mutate(pr_doc = doc/n)

doc_dat <- list(C = x_binom_doc$doc,
                N = x_binom_doc$n,
                ngroup = 3)

doc_pars <- c("alpha", "bt_alpha")


pr_doc <- run.jags(method = "parallel",
                       model = "Scripts/pr_untimely_death.txt",
                       monitor = doc_pars,
                       data = doc_dat,
                       sample = ni,
                       n.chains = nc,
                       adapt = nadapt,
                       burnin = nb,
                       summarise = F,
                       plots = F,
                       silent.jags = F)

pr_doc_list <- as.mcmc.list(pr_doc)
#saveRDS(pr_untimely_list, "Output/pr_untimely_list.RDS")

doc_sum <- mod_results_95(pr_doc_list)
doc_modmat <- doc_sum$modMat  
doc_S <- doc_sum$S

plot_trace <- F
if(plot_trace == T){
  ta <- ggs_traceplot(doc_S, family = "alpha")
  da <- ggs_density(doc_S, family = "bt_alpha") +
    xlim(c(0, 1))
}

head(doc_sum$sumTab)

pr_doc_manual <- doc_sum$sumTab$Mean[doc_sum$sumTab$Par == "bt_alpha[1]"] %>% round(2)
pr_doc_pole <- doc_sum$sumTab$Mean[doc_sum$sumTab$Par == "bt_alpha[2]"] %>% round(2)
pr_doc_dart <- doc_sum$sumTab$Mean[doc_sum$sumTab$Par == "bt_alpha[3]"] %>% round(2)

hpdi_doc_manual <- c(doc_sum$sumTab$HPDIlower[doc_sum$sumTab$Par == "bt_alpha[1]"], doc_sum$sumTab$HPDIupper[doc_sum$sumTab$Par == "bt_alpha[1]"]) %>%
  round(2)
hpdi_doc_pole <- c(doc_sum$sumTab$HPDIlower[doc_sum$sumTab$Par == "bt_alpha[2]"], doc_sum$sumTab$HPDIupper[doc_sum$sumTab$Par == "bt_alpha[2]"]) %>%
  round(2)
hpdi_doc_dart <- c(doc_sum$sumTab$HPDIlower[doc_sum$sumTab$Par == "bt_alpha[3]"], doc_sum$sumTab$HPDIupper[doc_sum$sumTab$Par == "bt_alpha[3]"]) %>%
  round(2)

pr_doc_df<- doc_sum$sumTab[c(4:6),]  %>%
  select(Par, Mean, HPDIlower, HPDIupper) %>%
  mutate(Par = c("Manual", "Pole syringe", "Dart"))

ggplot(pr_doc_df) +
  geom_point(aes(x=Par, y=Mean)) +
  geom_linerange(aes(x=Par, ymin=HPDIlower, ymax= HPDIupper)) +
  ylab("Pr(dead at capture)") +
  xlab("Capture method") +
  scale_y_continuous(expand=c(0.01,0), limits = c(0,0.1)) +
  theme_pubr(base_size = 8) +
  theme(legend.position = "bottom",
        legend.text = element_text(size=8),
        legend.title = element_blank(),
        axis.text = element_text(colour=1),
        strip.background = element_blank(),
        strip.text.x = element_blank(),
        axis.line=element_line(),
        legend.key.size = unit(0.3, "cm")) 

doc_post <- as.data.frame(doc_modmat[, c(5:7)])
doc_post_long <- doc_post %>%
  pivot_longer(cols = everything(), names_to = "parameter", values_to = "value") %>%
  mutate(parameter = factor(parameter, labels = c("Manual restraint", "Pole syringe", "Darting")))

ggplot(doc_post_long) +
  geom_density(aes(x=value, fill=parameter, colour=parameter), alpha=0.3) +  
  ylab("Density") +
  xlab("Value") +
  scale_y_continuous(expand=c(0,0)) +
  scale_x_continuous(expand=c(0,0)) +
    theme_pubr(base_size = 8) +
  coord_cartesian(ylim = c(0,100)) +
  theme(legend.position = "bottom",
        legend.text = element_text(size=8),
        legend.title = element_blank(),
        axis.text = element_text(colour=1),
        strip.background = element_blank(),
        strip.text.x = element_blank(),
        axis.line=element_line(),
        legend.key.size = unit(0.3, "cm")) 

```
    
**Q3 Did Body temperature and hyperthermia risk differ among treatments?**

It seems that for all pigs, temperature was taken during handling. This makes for a tidy oranges with oranges comparison, but it mightn't be an accurate representation of temperature during prolonged recovery when animals might suffer from poor thermoregulation?

*Expectation 3.1: Average body temperature during handling differed among treatments.*

I don't have a strong prior expectation that any treatment will be 'better' than any other with respect to body temperature during handling.

• Body temp \~ treatment + ambient temp

• Pr(body temp \> 40C) \~ treatment + ambient temp

```{r pr hyperthermia binomial}
x_binom_hyp <- x %>%
  group_by(capture_method) %>%
  summarise(n = n(),
            hyp = sum(hyperthermic)) %>%
  mutate(pr_hyp = hyp/n)

hyp_dat <- list(C = x_binom_hyp$hyp,
                N = x_binom_hyp$n,
                ngroup = 3)

hyp_pars <- doc_pars

pr_hyp <- run.jags(method = "parallel",
                       model = "Scripts/pr_untimely_death.txt",
                       monitor = hyp_pars,
                       data = hyp_dat,
                       sample = ni,
                       n.chains = nc,
                       adapt = nadapt,
                       burnin = nb,
                       summarise = F,
                       plots = F,
                       silent.jags = F)

pr_hyp_list <- as.mcmc.list(pr_hyp)
#saveRDS(pr_untimely_list, "Output/pr_untimely_list.RDS")

hyp_sum <- mod_results_95(pr_hyp_list)
hyp_modmat <- hyp_sum$modMat  
hyp_S <- hyp_sum$S

plot_trace <- F
if(plot_trace == T){
  ta <- ggs_traceplot(hyp_S, family = "alpha")
  da <- ggs_density(hyp_S, family = "bt_alpha") +
    xlim(c(0, 1))
}

head(hyp_sum$sumTab)

pr_hyp_manual <- hyp_sum$sumTab$Mean[hyp_sum$sumTab$Par == "bt_alpha[1]"] %>% round(2)
pr_hyp_pole <- hyp_sum$sumTab$Mean[hyp_sum$sumTab$Par == "bt_alpha[2]"] %>% round(2)
pr_hyp_dart <- hyp_sum$sumTab$Mean[hyp_sum$sumTab$Par == "bt_alpha[3]"] %>% round(2)

hpdi_hyp_manual <- c(hyp_sum$sumTab$HPDIlower[hyp_sum$sumTab$Par == "bt_alpha[1]"], hyp_sum$sumTab$HPDIupper[hyp_sum$sumTab$Par == "bt_alpha[1]"]) %>%
  round(2)
hpdi_hyp_pole <- c(hyp_sum$sumTab$HPDIlower[hyp_sum$sumTab$Par == "bt_alpha[2]"], hyp_sum$sumTab$HPDIupper[hyp_sum$sumTab$Par == "bt_alpha[2]"]) %>%
  round(2)
hpdi_hyp_dart <- c(hyp_sum$sumTab$HPDIlower[hyp_sum$sumTab$Par == "bt_alpha[3]"], hyp_sum$sumTab$HPDIupper[hyp_sum$sumTab$Par == "bt_alpha[3]"]) %>%
  round(2)

pr_hyp_df<- hyp_sum$sumTab[c(4:6),]  %>%
  select(Par, Mean, HPDIlower, HPDIupper) %>%
  mutate(Par = c("Manual", "Pole syringe", "Dart"))

ggplot(pr_hyp_df) +
  geom_point(aes(x=Par, y=Mean)) +
  geom_linerange(aes(x=Par, ymin=HPDIlower, ymax= HPDIupper)) +
  ylab("Pr(dead at capture)") +
  xlab("Capture method") +
  scale_y_continuous(expand=c(0.01,0), limits = c(0,0.3)) +
  theme_pubr(base_size = 8) +
  theme(legend.position = "bottom",
        legend.text = element_text(size=8),
        legend.title = element_blank(),
        axis.text = element_text(colour=1),
        strip.background = element_blank(),
        strip.text.x = element_blank(),
        axis.line=element_line(),
        legend.key.size = unit(0.3, "cm")) 

hyp_post <- as.data.frame(hyp_modmat[, c(5:7)])
hyp_post_long <- hyp_post %>%
  pivot_longer(cols = everything(), names_to = "parameter", values_to = "value") %>%
  mutate(parameter = factor(parameter, labels = c("Manual restraint", "Pole syringe", "Darting")))

ggplot(hyp_post_long) +
  geom_density(aes(x=value, fill=parameter, colour=parameter), alpha=0.3) +  
  ylab("Density") +
  xlab("Value") +
  scale_y_continuous(expand=c(0,0), limits = c(0,15)) +
  scale_x_continuous(expand=c(0,0)) +
    theme_pubr(base_size = 8) +
  theme(legend.position = "bottom",
        legend.text = element_text(size=8),
        legend.title = element_blank(),
        axis.text = element_text(colour=1),
        strip.background = element_blank(),
        strip.text.x = element_blank(),
        axis.line=element_line(),
        legend.key.size = unit(0.3, "cm")) 

```




Collaring events were recorded for `r n_manual` feral pigs using manual restraint and `r n_drug` pigs using chemical restraint. Median IT was 4 min, median RT was 56 min, and median TT was 61 min (Table 1; Fig. 2).

